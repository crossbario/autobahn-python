Common Tasks
============

1. Build Python Documentation
-----------------------------

1.1 Building the documentation
..............................

Requires Sphinx:

   easy_install sphinx

To build the documentation, do

   cd doc/python
   make html

This will create the documentation under

   doc/python/_build/html


1.2 Deployment to Tavendo Web site
..................................

The generated contents of above folder then needs to
be checked into the

   wwwtavendo

repository in this directory

   tavendo/tavendo/static/autobahn/doc/python

The repository change has to be pulled on the
Web site production host www.tavendo.de


2. Publishing to PyPi
---------------------

   cd lib/python

The distribution has to be registered

   python setup.py register

Now build and upload the following build variants:

   python setup.py sdist upload
   python setup.py bdist_egg upload
   python setup.py bdist_wininst upload




Test Suite
==========

Features
--------

REQ = someone asked for it


  - REQ: Allow to specify case exclusion patterns

  - REQ: Overview report gets too broad: maybe rotate agent labels in report 90° counterclock => css

  - REQ: make NON-STRICT more green (yes, was asked by some project to do;) => td.case_almost

  - REQ: add notice at top of report overview, explaining diff. beetween PASS, NON-STRICT and FAIL

  - exhaustively test UTF-8 non-chars : EF BF [BE-BF] or F[0-7] [89AB]F BF [BE-BF] (any codepoint whose low 16 bits are 0xFFFE or 0xFFFF ??)
    see: https://bugzilla.mozilla.org/show_bug.cgi?id=686312

  - REQ: add new case variant of 6.4.2 where the middle frame is large (64k)

  - REQ: split out 6.4.3 to a new test section: "Implementation Limits" => see how behaves

  - REQ: UTF-8 fail fast => differentiate 4 behaviors:

      1. only when complete message was received
      2. only when complete frame was received
      3. only when complete octets for encoded integer was received
      4. as soon as invalid octet is received

      Currently, there are tests to distinguish between 1., 2. and 4.
      So for completeness, there need to be tests to differentiate between 3. and 4.

  - REQ: Closing Handshake

  - Opening Handshake

  - Server-to-Client Masking

  - Message Roundtrip Time / Latency

  - JSON roundtripping tests

  - Timestamps for rows in Wirelog


Misc Cases
----------

  - peer must fail on overlong payload length encodings

  - client must fail for masked server frames

  - server must fail for unmasked client frames

  - sending a 2^63 frame.

  - send frames having non-minimal payload length encoding


Opening Handshake
-----------------

  - send handshake chopped up, followed by message frame


Closing Handshake Cases
-----------------------

  - test sending 2 or more close frames: peer must only respond to first with close reply
    and ignore (fail?) the others

  - test sending close frame, then pings or messages after that: peer must ignore
    everything after the close frame

  - test close handshake in the middle of a fragmented message (one that isn't finished yet)

  - test: sending 5 pings + close + 5 pings in one go (fast): see what the peer pongs back

  - payload length = 1 must be denied

  - when payload length == 2: test the different codes, disallowed code ranges

  - when payload length > 2: the rest must (?) be valid UTF-8,
    test sending invalid UTF-8 / binary data

  - make the peer initiate close (see below), ignore the request (never reply), test timeout of peer
    on close reply

  - make peer initiate close (see below), but respond with something violating the protocol
    (i.e. a fragmented close reply, a close frame with invalid code/reason). see how the
   peer acts when confronted with this "double error situation"

  - when the fuzzer initiates close with code/reason, what is the peer replying as code/reason?

  - make the peer initate close, but then ignore that _and_ continue by sending messages/pings.
    does the peer reply to those? does it time out on his close iniation and fail the connection?

  - when the fuzzer == server, test client timeout on drop TCP after close

  - sending close codes 1005 and 1006 : isn't allowed.

  - sending close codes <1000 >=5000 / 1004 is "reserved"


Probably, we need to have a way to instruct the tested peer to iniate a
closing handshake to test certain things (like timeouts).

Currently, a tested implementation only needs to echo back any message (text or
binary) it has received.

We slightly extend that: when a text message is received with first char = '#',
then the rest is a command, like i.e. "#close".

A tested implementation that only implements the echo would echo back the command,
and the test case sending the command could recognize that the peer does not
implement the extended testing commands.


Potential (larger) Features
---------------------------

1. Reports Database

Persistently store all run cases / reports into SQLite.

Currently, everything is stored only in run-time Python objects, and when
the fuzzer ends, that state is lossed. Users have to run everything they want
to test in one session, and there is no history of reports.

2. Testsuite Web UI

The fuzzing_server already runs an embedded web server (Twisted Site).
This could be extended to allow configuration/access to above database, and
also to interactively start fuzzing_clients.


Core
====

WebSocket Protocol

  - changes for Hybi-17 .. see also: http://code.google.com/p/pywebsocket/wiki/WebSocketProtocolSpec

  - allow FIN = true on beginMessageFrame instead of endMessage

  - Further optimize masking: http://stackoverflow.com/questions/2119761/simple-python-challenge-fastest-bitwise-xor-on-data-buffers

  - check NumPy for masking
    https://github.com/kanaka/websockify/blob/6e263063c2b63642a0e17cb91d6b9f6c9365c0c0/websocket.py#L293

  - SSL support

Add options, configurable at run-time from command line flags, or on Protocol derived
class in connectionMade():

Masking

   maskServerFrames (false)
   acceptMaskedServerFrames (false)
   applyMask (true)

Close Handling

   failConnectionWithClose (false)

Automatic Pings

Automatic Fragmentation

Frame/Message Size Limits


WAMP
====

1) Subscribe on topic URI prefix

2) topic subscription/unsubscription events (aka "presence")

   * generated by server framework
   * configurable per topic URI (when topic is registered)

3) error feedback to client?

   on: subscribe, unsubscribe, publish

4) prefix maps: 2? (c2s and s2c map?)

5) client auth: 3 messages for challenge-response auth

   * WAMP message types
   * server-side hooks
   * client API

6) uses of topic handlers:

     - fine-grained publish/subscribe authorization
     - topic event content-based filtering
     - content-based subscriptions

7) Tutorials

   - Simple
   - Topic Handlers (publish/subscribe authorization)
   - Server-Side dispatching
   - Prefix Subscriptions?
   - Topic meta events (aka "presence")
   - Direct c2c Messaging?
