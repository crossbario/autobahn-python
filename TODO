Common Tasks
============

1. Build Python Documentation
-----------------------------

1.1 Building the documentation
..............................

Requires Sphinx:

   easy_install sphinx

To build the documentation, do

   cd doc/python
   make html

This will create the documentation under

   doc/python/_build/html


1.2 Deployment to Tavendo Web site
..................................

The generated contents of above folder then needs to
be checked into the

   wwwtavendo

repository in this directory

   tavendo/tavendo/static/autobahn/doc/python

The repository change has to be pulled on the
Web site production host www.tavendo.de


2. Publishing to PyPi
---------------------

   cd lib/python

The distribution has to be registered

   python setup.py register

Now build and upload the following build variants:

   python setup.py sdist upload
   python setup.py bdist_egg upload
   python setup.py bdist_wininst upload


WAMP
====

0) CALL_ERROR:

     alt : [ TYPE_ID_CALL_ERROR,   callID,   errorURI,   errorDesc ]
     neu : [ TYPE_ID_CALL_ERROR,   callID,  [ (errorTypeURI, errorLocationURI, errorDesc) ] ]

   ??

1) Subscribe on topic URI prefix

2) topic subscription/unsubscription events (aka "presence")

   * generated by server framework
   * configurable per topic URI (when topic is registered)

3) error feedback to client?

   on: subscribe, unsubscribe, publish

4) prefix maps: 2? (c2s and s2c map?)

5) client auth: 3 messages for challenge-response auth

   * WAMP message types
   * server-side hooks
   * client API

6) uses of topic handlers:

     - fine-grained publish/subscribe authorization
     - topic event content-based filtering
     - content-based subscriptions

7) Tutorials

   - Simple
   - Topic Handlers (publish/subscribe authorization)
   - Server-Side dispatching
   - Prefix Subscriptions?
   - Topic meta events (aka "presence")
   - Direct c2c Messaging?
