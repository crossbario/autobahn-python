[tox]
skip_missing_interpreters = true
envlist =
    flake8
    sphinx
    py310-{tw2210,tw255,twtrunk,asyncio}
    py312-{tw2210,tw255,twtrunk,asyncio}
    pypy-{tw2210,tw255,twtrunk,asyncio}
#    pypy310-{tw2210,tw255,twtrunk,asyncio}
#    pypytrunk-{tw2210,tw255,twtrunk,asyncio}

# https://buildbot.pypy.org/nightly/trunk/pypy-c-jit-latest-linux64.tar.bz2


# MAP: GitHub Actions Python Name => Tox Env Name (for Python)
#
# when called without a specific environment ("-e"), detect the
# python version / get from GH action, and map to tox env
#
# https://github.com/ymyzk/tox-gh-actions
#
[gh-actions]
python =
    3.10: py310
    3.12: py312
    pypy-3.10: pypy310


[testenv]
deps =
    pytest

    ; txaio
    git+https://github.com/crossbario/txaio

    ; UNTIL bitarray is released on pypi with pypy fixes
    git+https://github.com/ilanschnell/bitarray.git@master#egg=bitarray

    # On PyPy, even pygobject-3.52.3 does not work, because they use a pythoncapi-compat which is too old1
    #
    # See:
    #   - https://github.com/pypy/pypy/issues/5248
    #   - https://github.com/pypy/pypy/issues/5248#issuecomment-3011857854
    #   - https://gitlab.gnome.org/GNOME/pygobject/-/issues/684
    #
    # This was fixed here:
    #   - https://gitlab.gnome.org/GNOME/pygobject/-/merge_requests/419
    #
    # IMPORTANT: because of above, you will need to
    #
    #  pip3 install git+https://gitlab.gnome.org/GNOME/pygobject
    #
    git+https://gitlab.gnome.org/GNOME/pygobject

    cytoolz

    tw2210: twisted==22.10.0
    tw255: twisted==25.5.0
    twtrunk: https://github.com/twisted/twisted/archive/trunk.zip
    {tw2210,tw255,twtrunk}: pytest-twisted

    ; asyncio dependencies
    asyncio: pytest_asyncio

extras =
    encryption
    serialization
    scram
    nvx

allowlist_externals =
    trial
    sh
    cp
    mkdir
    rm
    ls
    mv
    curl
    unzip
    find
    echo
    file
    du
    chmod
    ldd
    which

setenv =
    # NaCl/Sodium: use and build bundled sources (don't use any system library)
    SODIUM_INSTALL=bundled

    # controls build of WAMP serializers:
    PYUBJSON_NO_EXTENSION=1
    # AUTOBAHN_USE_NVX=1
    # AUTOBAHN_USE_UJSON=1

    # controls test setup according to networking framework
    asyncio: USE_ASYNCIO=1
    asyncio: PYTHONPATH={toxinidir}
    tw2403,twtrunk: USE_TWISTED=1

    # this enables "autobahn/test/test_rng.py" (on Linux),
    # which tests entropy depletion, and tests how to correctly
    # read _real_ entropy and block if not enough _real_ entropy is currently avail
    # also: https://github.com/crossbario/autobahn-python/issues/1275
    # AUTOBAHN_CI_ENABLE_RNG_DEPLETION_TESTS = 1

commands =
    # install package
    # pip install -q -U pip
    # sh -c "which python && which pip && python -V"
    # pip install -q --no-cache --ignore-installed --force-reinstall .[twisted,asyncio,compress,serialization,encryption,scram]

    # IMPORTANT: we need to exclude all twisted tests
    asyncio: pytest -s -v -rfP --ignore=./autobahn/twisted ./autobahn

    # IMPORTANT: trial doesn't allow to recurse-and-exclude, and hence we need this looong list (because we must exclude "asyncio")
    tw2403: trial                    --no-recurse autobahn.test autobahn.twisted.test autobahn.websocket.test autobahn.rawsocket.test autobahn.wamp.test autobahn.nvx.test
    twtrunk: python -m twisted.trial --no-recurse autobahn.test autobahn.twisted.test autobahn.websocket.test autobahn.rawsocket.test autobahn.wamp.test autobahn.nvx.test


[testenv:flake8]
skip_install = True
# Install all development dependencies from a single source
deps =
    -r requirements-dev.txt
commands =
    python -V
    flake8 --version
    # flake8 will automatically find and use the [flake8] section in setup.cfg
    flake8 --statistics autobahn


[testenv:sphinx]
description =
    Generate docs using Sphinx.
skip_install = False
deps =
    sphinx<8
    sphinx_rtd_theme
    sphinxcontrib.images
    sphinx.autoapi
    myst_parser
    git+https://github.com/crossbario/txaio
    # git+https://github.com/erikrose/parsimonious.git
commands =
    python -V
    sphinx-build --version
    pip install .[all]

    # pip install -U git+https://github.com/erikrose/parsimonious.git
    # python -c "from parsimonious.grammar import Grammar, TokenGrammar"
    # python -c "from eth_abi import abi"

    python -c "from autobahn.websocket.utf8validator import Utf8Validator"

    # first test with all warnings fatal
    find ./docs -name "*.rst"

    # FIXME: readd "-W" .. I dont have time for this shit, fuck sphinx
    # sphinx-build -T -b dummy ./docs ./docs/_build

    # generate HTML output
    sphinx-build -b html ./docs ./docs/_build


[testenv:buildexe]
description =
    Build one-file executable using PyInstaller.
skip_install = True
passenv =
    AUTOBAHN_BUILD_DATE
    AUTOBAHN_BUILD_ID
    AUTOBAHN_VCS_REF
    AUTOBAHN_VERSION
deps =
    pip
    pyinstaller==4.8
commands =
    echo "Building with AUTOBAHN_BUILD_DATE={env:AUTOBAHN_BUILD_DATE}"
    echo "Building with AUTOBAHN_BUILD_ID={env:AUTOBAHN_BUILD_ID}"
    echo "Building with AUTOBAHN_VCS_REF={env:AUTOBAHN_VCS_REF}"
    echo "Building with AUTOBAHN_VERSION={env:AUTOBAHN_VERSION}"

    # Install pip v19.3.1 (yes, absolutely, we do not want the "new resolver" shit)
    # curl -sSL -o get-pip.py https://bootstrap.pypa.io/get-pip.py
    # python get-pip.py   # fails with https://github.com/pypa/setuptools/issues/3044
    # python get-pip.py "pip<20"
    pip show pip

    # Install development dependencies
    pip install -r{toxinidir}/requirements-dev.txt

    # inject build ID into source code: modifies autobahn/_version.py!
    echo "Building with AUTOBAHN_BUILD_ID={env:AUTOBAHN_BUILD_ID}"
    python inject-build-id.py

    # Install the package itself
    pip install .[all]

    # print effective version/build
    python -c "from autobahn._version import __version__, __build__; print('autobahn==', __version__, __build__)"
