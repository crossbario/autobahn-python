[tox]
skip_missing_interpreters = true
envlist =
    flake8
    sphinx
    py37-{tw203,tw2210,twtrunk,asyncio}
    # Twisted <22.10 on Python 3.11 fails with:
    # src/twisted/test/raiser.c:198:12: fatal error: longintrepr.h: Datei oder Verzeichnis nicht gefunden
    py311-{tw2210,twtrunk,asyncio}
    pypy37-{tw2210,twtrunk,asyncio}
    pypy39-{tw2210,twtrunk,asyncio}


# MAP: GitHub Actions Python Name => Tox Env Name (for Python)
#
# when called without a specific environment ("-e"), detect the
# python version / get from GH action, and map to tox env
#
# https://github.com/ymyzk/tox-gh-actions
#
[gh-actions]
python =
    3.7: py37
    3.11: py311
    pypy-3.7: pypy37
    pypy-3.9: pypy39


[testenv]
deps =
    pytest

    ; txaio
    git+https://github.com/crossbario/txaio

    ; FIXME: https://github.com/ethereum/web3.py/issues/2704#issuecomment-1369041219
    git+https://github.com/ethereum/web3.py.git
    cytoolz

    ; twisted dependencies
    tw203: twisted==20.3.0
    tw2210: twisted==22.10.0

    # twtrunk: https://github.com/twisted/twisted/archive/trunk.zip
    twtrunk: git+https://github.com/twisted/twisted
    {tw203,tw2210,twtrunk}: pytest-twisted

    ; asyncio dependencies
    asyncio: pytest_asyncio

extras =
    encryption
    serialization
    scram
    nvx
    xbr

allowlist_externals =
    sh
    cp
    mkdir
    rm
    ls
    mv
    curl
    unzip
    find
    echo
    file
    du
    xbrnetwork
    chmod
    ldd
    which

passenv =
    WEB3_INFURA_PROJECT_ID
    WEB3_INFURA_API_SECRET

setenv =
    # NaCl/Sodium: use and build bundled sources (don't use any system library)
    SODIUM_INSTALL=bundled

    # controls build of WAMP serializers:
    PYUBJSON_NO_EXTENSION=1
    # AUTOBAHN_USE_NVX=1
    # AUTOBAHN_USE_UJSON=1

    # controls test setup according to networking framework
    asyncio: USE_ASYNCIO=1
    asyncio: PYTHONPATH={toxinidir}
    tw203,tw2210,twtrunk: USE_TWISTED=1

    # this enables "autobahn/test/test_rng.py" (on Linux),
    # which tests entropy depletion, and tests how to correctly
    # read _real_ entropy and block if not enough _real_ entropy is currently avail
    # also: https://github.com/crossbario/autobahn-python/issues/1275
    # AUTOBAHN_CI_ENABLE_RNG_DEPLETION_TESTS = 1

commands =
    # install package
    # pip install -q -U pip
    # sh -c "which python && which pip && python -V"
    # pip install -q --no-cache --ignore-installed --force-reinstall .[twisted,asyncio,compress,serialization,encryption,scram,xbr]

    # IMPORTANT: we need to exclude all twisted tests
    asyncio: pytest -s -v -rfP --ignore=./autobahn/twisted ./autobahn

    # IMPORTANT: trial doesn't allow to recurse-and-exclude, and hence we need this looong list (because we must exclude "asyncio")
    tw203,tw2210: trial        --no-recurse autobahn.test autobahn.twisted.test autobahn.websocket.test autobahn.rawsocket.test autobahn.wamp.test autobahn.xbr.test autobahn.nvx.test
    twtrunk: python -m twisted.trial --no-recurse autobahn.test autobahn.twisted.test autobahn.websocket.test autobahn.rawsocket.test autobahn.wamp.test autobahn.xbr.test autobahn.nvx.test


[testenv:flake8]
skip_install = True
deps =
    flake8<5
    pep8-naming
exclude = autobahn/wamp/gen
max-line-length = 119
commands =
    python -V
    flake8 --version
    flake8 -v --statistics \
        --ignore=E402,E501,E722,E741,N801,N802,N803,N805,N806,N815,N818 \
        --exclude "autobahn/wamp/message_fbs.py,autobahn/wamp/gen/*" \
        autobahn


[testenv:sphinx]
description =
    Generate docs using Sphinx.
skip_install = False
deps =
    sphinx
    sphinx_rtd_theme
    sphinxcontrib.images
    sphinx.autoapi
    git+https://github.com/crossbario/txaio
    git+https://github.com/erikrose/parsimonious.git
extras =
    twisted>=22.10.0
    encryption
    serialization
    scram
    nvx
    xbr
commands =
    python -V
    sphinx-build --version
    pip install .[all]

    pip install -U git+https://github.com/erikrose/parsimonious.git
    python -c "from parsimonious.grammar import Grammar, TokenGrammar"
    python -c "from eth_abi import abi"

    # python -c "from autobahn import xbr; print('HAS_XBR=' + str(xbr.HAS_XBR))"
    # python -c "from autobahn import xbr; assert(xbr.HAS_XBR)"
    python -c "from autobahn.websocket.utf8validator import Utf8Validator"

    # first test with all warnings fatal
    find ./docs -name "*.rst"

    # FIXME: readd "-W" .. I dont have time for this shit, fuck sphinx
    # sphinx-build -T -b dummy ./docs ./docs/_build

    # generate HTML output
    sphinx-build -b html ./docs ./docs/_build


[testenv:buildexe]
description =
    Build one-file executable using PyInstaller.
skip_install = True
passenv =
    AUTOBAHN_BUILD_DATE
    AUTOBAHN_BUILD_ID
    AUTOBAHN_VCS_REF
    AUTOBAHN_VERSION
    XBRNETWORK_EXE_FILENAME
deps =
    pip
    pyinstaller==4.8
commands =
    echo "Building with AUTOBAHN_BUILD_DATE={env:AUTOBAHN_BUILD_DATE}"
    echo "Building with AUTOBAHN_BUILD_ID={env:AUTOBAHN_BUILD_ID}"
    echo "Building with AUTOBAHN_VCS_REF={env:AUTOBAHN_VCS_REF}"
    echo "Building with AUTOBAHN_VERSION={env:AUTOBAHN_VERSION}"
    echo "Building with XBRNETWORK_EXE_FILENAME={env:XBRNETWORK_EXE_FILENAME}"

    # Install pip v19.3.1 (yes, absolutely, we do not want the "new resolver" shit)
    # curl -sSL -o get-pip.py https://bootstrap.pypa.io/get-pip.py
    # python get-pip.py   # fails with https://github.com/pypa/setuptools/issues/3044
    # python get-pip.py "pip<20"
    pip show pip

    # Install development dependencies
    pip install -r{toxinidir}/requirements-dev.txt

    # inject build ID into source code: modifies autobahn/_version.py!
    echo "Building with AUTOBAHN_BUILD_ID={env:AUTOBAHN_BUILD_ID}"
    python inject-build-id.py

    # Install the package itself
    pip install .[all]

    # print effective version/build
    python -c "from autobahn._version import __version__, __build__; print('autobahn==', __version__, __build__)"

    # run CLI and print versions
    xbrnetwork version

    # bundle up dist/xbrnetwork
    which pyinstaller
    pyinstaller --version
	pyinstaller --additional-hooks-dir={toxinidir}/pyinstaller \
        --specpath={toxinidir}/pyinstaller --onefile --clean \
        --name xbrnetwork {toxinidir}/autobahn/xbr/_cli.py

    chmod +x {toxinidir}/dist/xbrnetwork
    cp {toxinidir}/dist/xbrnetwork {homedir}/xbrnetwork

    # base check of the produced executable
	file {homedir}/xbrnetwork
	ldd {homedir}/xbrnetwork
    du -h {homedir}/xbrnetwork
	{homedir}/xbrnetwork version
