{% if render_imports %}
import os
import random
import timeit
import uuid
import cbor2

import txaio
txaio.use_twisted()  # noqa

from autobahn import util
from autobahn.wamp.serializer import JsonObjectSerializer, MsgPackObjectSerializer, \
    CBORObjectSerializer, UBJSONObjectSerializer

import flatbuffers
import pytest
import numpy as np
from txaio import time_ns


@pytest.fixture(scope='function')
def builder():
    _builder = flatbuffers.Builder(0)
    return _builder


_SERIALIZERS = [
    JsonObjectSerializer(),
    MsgPackObjectSerializer(),
    CBORObjectSerializer(),
    UBJSONObjectSerializer(),
]

{% endif %}
from .{{ metadata.module_relimport }} import {{ metadata.classname }}


def fill_{{ metadata.classname }}(obj: {{ metadata.classname }}):
    import os

    {% for field_name in metadata.fields_by_id %}
    {% if metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'str' %}
    obj.{{ metadata.fields[field_name].name }} = util.generate_activation_code()
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'bytes' %}
    obj.{{ metadata.fields[field_name].name }} = os.urandom(32)
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) in ['int', 'long'] %}
    # FIXME: enum vs int
    # obj.{{ metadata.fields[field_name].name }} = random.randint(0, 2**31 - 1)
    obj.{{ metadata.fields[field_name].name }} = random.randint(0, 3)
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) in ['float', 'double'] %}
    obj.{{ metadata.fields[field_name].name }} = random.random()
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'bool' %}
    obj.{{ metadata.fields[field_name].name }} = random.random() > 0.5
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'uuid.UUID' %}
    obj.{{ metadata.fields[field_name].name }} = uuid.uuid4()
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'np.datetime64' %}
    obj.{{ metadata.fields[field_name].name }} = np.datetime64(time_ns(), 'ns')
    {% else %}
    obj.{{ metadata.fields[field_name].name }} = None
    {% endif %}
    {% endfor %}


def fill_{{ metadata.classname }}_empty(obj: {{ metadata.classname }}):
    {% for field_name in metadata.fields_by_id %}
    obj.{{ metadata.fields[field_name].name }} = None
    {% endfor %}


@pytest.fixture(scope='function')
def {{ metadata.classname }}_obj():
    _obj: {{ metadata.classname }} = {{ metadata.classname }}()
    fill_{{ metadata.classname }}(_obj)
    return _obj


def test_{{ metadata.classname }}_roundtrip({{ metadata.classname }}_obj, builder):
    # serialize to bytes (flatbuffers) from python object
    obj = {{ metadata.classname }}_obj.build(builder)
    builder.Finish(obj)
    data = builder.Output()

    # check length of serialized object data
    print('{} serialized object length = {} bytes'.format('{{ metadata.classname }}', len(data)))

    # create python object from bytes (flatbuffes)
    _obj: {{ metadata.classname }} = {{ metadata.classname }}_obj.cast(data)

    {% for field_name in metadata.fields_by_id %}
    assert _obj.{{ metadata.fields[field_name].name }} == {{ metadata.classname }}_obj.{{ metadata.fields[field_name].name }}
    {% endfor %}


def test_{{ metadata.classname }}_empty(builder):
    empty_obj = {{ metadata.classname }}()
    fill_{{ metadata.classname }}_empty(empty_obj)

    # check the object was initialized correctly
    {% for field_name in metadata.fields_by_id %}
    {% if metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'str' %}
    assert empty_obj.{{ metadata.fields[field_name].name }} == ''
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'bytes' %}
    assert empty_obj.{{ metadata.fields[field_name].name }} == b''
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) in ['int', 'long'] %}
    assert empty_obj.{{ metadata.fields[field_name].name }} == 0
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) in ['float', 'double'] %}
    assert empty_obj.{{ metadata.fields[field_name].name }} == 0.0
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'bool' %}
    assert empty_obj.{{ metadata.fields[field_name].name }} is False
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'uuid.UUID' %}
    assert empty_obj.{{ metadata.fields[field_name].name }} == uuid.UUID(bytes=b'\0'*16)
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'np.datetime64' %}
    assert empty_obj.{{ metadata.fields[field_name].name }} == np.datetime64(0, 'ns')
    {% else %}
    assert empty_obj.{{ metadata.fields[field_name].name }} is None
    {% endif %}
    {% endfor %}

    # serialize to bytes (flatbuffers) from python object
    obj = empty_obj.build(builder)
    builder.Finish(obj)
    data = builder.Output()

    # check length of serialized object data
    print('{} serialized object length = {} bytes'.format('{{ metadata.classname }}', len(data)))

    # create python object from bytes (flatbuffes)
    _obj: {{ metadata.classname }} = {{ metadata.classname }}.cast(data)

    {% for field_name in metadata.fields_by_id %}
    {% if metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'str' %}
    assert _obj.{{ metadata.fields[field_name].name }} == ''
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'bytes' %}
    assert _obj.{{ metadata.fields[field_name].name }} == b''
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) in ['int', 'long'] %}
    assert _obj.{{ metadata.fields[field_name].name }} == 0
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) in ['float', 'double'] %}
    assert _obj.{{ metadata.fields[field_name].name }} == 0.0
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'bool' %}
    assert _obj.{{ metadata.fields[field_name].name }} is False
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'uuid.UUID' %}
    assert _obj.{{ metadata.fields[field_name].name }} == uuid.UUID(bytes=b'\0'*16)
    {% elif metadata.fields[field_name].type.map('python', metadata.fields[field_name].attrs, True) == 'np.datetime64' %}
    assert _obj.{{ metadata.fields[field_name].name }} == np.datetime64(0, 'ns')
    {% else %}
    assert _obj.{{ metadata.fields[field_name].name }} is None
    {% endif %}
    {% endfor %}


def test_{{ metadata.classname }}_roundtrip_perf({{ metadata.classname }}_obj, builder):
    obj = {{ metadata.classname }}_obj.build(builder)
    builder.Finish(obj)
    data = builder.Output()
    scratch = {'value': 0}

    def loop():
        _obj: {{ metadata.classname }} = {{ metadata.classname }}.cast(data)
        {% for field_name in metadata.fields_by_id %}
        assert _obj.{{ metadata.fields[field_name].name }} == {{ metadata.classname }}_obj.{{ metadata.fields[field_name].name }}
        {% endfor %}
        scratch['value'] += 1

    N = 7
    M = 20000
    samples = []
    print('measuring:')
    for i in range(N):
        secs = timeit.timeit(loop, number=M)
        ops = round(float(M) / secs, 1)
        samples.append(ops)
        print('{} objects/sec performance'.format(ops))

    samples = sorted(samples)
    ops50 = samples[int(len(samples) / 2)]
    print('RESULT: {} objects/sec median performance'.format(ops50))

    assert ops50 > 1000
    print(scratch['value'])


def test_{{ metadata.classname }}_marshal_parse({{ metadata.classname }}_obj, builder):
    obj = {{ metadata.classname }}_obj.marshal()
    _obj = {{ metadata.classname }}_obj.parse(obj)
    {% for field_name in metadata.fields_by_id %}
    assert _obj.{{ metadata.fields[field_name].name }} == {{ metadata.classname }}_obj.{{ metadata.fields[field_name].name }}
    {% endfor %}


def test_{{ metadata.classname }}_marshal_cbor_parse({{ metadata.classname }}_obj, builder):
    obj = {{ metadata.classname }}_obj.marshal()
    data = cbor2.dumps(obj)
    print('serialized {} to {} bytes (cbor)'.format({{ metadata.classname }}, len(data)))
    _obj_raw = cbor2.loads(data)
    _obj = {{ metadata.classname }}_obj.parse(_obj_raw)
    {% for field_name in metadata.fields_by_id %}
    assert _obj.{{ metadata.fields[field_name].name }} == {{ metadata.classname }}_obj.{{ metadata.fields[field_name].name }}
    {% endfor %}


def test_{{ metadata.classname }}_ab_serializer_roundtrip({{ metadata.classname }}_obj, builder):
    obj = {{ metadata.classname }}_obj.marshal()
    for ser in _SERIALIZERS:
        data = ser.serialize(obj)
        print('serialized {} to {} bytes ({})'.format({{ metadata.classname }}, len(data), ser.NAME))
        msg2 = ser.unserialize(data)[0]
        obj2 = {{ metadata.classname }}.parse(msg2)

        {% for field_name in metadata.fields_by_id %}
        assert obj2.{{ metadata.fields[field_name].name }} == {{ metadata.classname }}_obj.{{ metadata.fields[field_name].name }}
        {% endfor %}
