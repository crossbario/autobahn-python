///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) typedef int GmbH and contributors.
//  All rights reserved. Licensed under the MIT open-source license.
//
///////////////////////////////////////////////////////////////////////////////

include "wamp.fbs";

namespace wamp;


table SessionRolesFilter
{
    /// The ID of the subscription to remove the subscriber from.
    subscription_id: uint64 (arg, wampid);

    /// The WAMP session ID of the subscriber to remove.
    subscriber_id: uint64 (arg, wampid);

    // FIXME.
    reason: string (wampuri);
}

attribute uri;


/// WAMP dynamic authentication API.
rpc_service IWampAuthenticate(type: "interface",
                              uuid: "85da09ef-d3be-467a-acbc-0647a617ef98",
                              wampuri: "wamp", uri: "wamp")
{
    /// Authenticate a WAMP session to join a realm.
    authenticate (SessionRolesFilter): WampIds (type: "procedure", uri: "wamp.session.authenticate");

    /// Fired when an authentication of a WAMP session joining a realm was denied.
    on_authentication_denied (Void): Void (type: "topic", uri: "wamp.session.on_authentication_denied");
}

/// WAMP dynamic authorization API.
rpc_service IWampAuthorize(type: "interface",
                           uuid: "58c79d59-4b0c-4d1c-9c85-cf80236bd6ad",
                           wampuri: "wamp", uri: "wamp")
{
    /// Authorize a WAMP session for a WAMP action on a URI on a realm.
    authorize (SessionRolesFilter): WampIds (type: "procedure", uri: "wamp.session.authorize");

    /// Fired when an authorization of a WAMP action on an URI was denied.
    on_authorization_denied (Void): Void (type: "topic", uri: "wamp.session.on_authorization_denied");
}
