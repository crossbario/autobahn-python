name: main

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Install uv
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.cargo/env
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify toolchain installation
        run: |
          just --version
          uv --version

      - name: Setup uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key:
            uv-cache-ubuntu-quality-${{
            hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-cache-ubuntu-quality-

      - name: Create Python environment and install tools
        run: |
          just create cpy314
          just install-tools cpy314

      - name: Code formatting / linting (via ruff)
        run: just check-format cpy314

      # FIXME: Found 239 errors in 45 files (checked 163 source files)
      # - name: Code static typing (via mypy)
      #   run: just check-typing cpy314

      - name: Code test coverage (Combined Twisted + asyncio)
        run: just check-coverage-combined cpy314

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-combined
          path: docs/_build/html/coverage-combined/
          retention-days: 14

      - name: Unit test - Twisted / trial
        run: just test-twisted cpy314

      - name: Unit test - asyncio / pytest
        run: just test-asyncio cpy314

  documentation:
    name: Documentation Build
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Install uv
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.cargo/env
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify toolchain installation
        run: |
          just --version
          uv --version

      - name: Setup uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key:
            uv-cache-ubuntu-docs-${{ hashFiles('pyproject.toml')
            }}
          restore-keys: |
            uv-cache-ubuntu-docs-

      - name: Create Python environment and install tools
        run: |
          just create cpy314
          just install-tools cpy314

      - name: Build documentation
        run: just docs cpy314

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/
          retention-days: 14

  # FIXME: Sphinx error:
  # Builder name spelling not registered or available through entry point
  # Error: Process completed with exit code 2.
  #
  # spellcheck:
  #   name: Documentation Spellcheck
  #   runs-on: ubuntu-24.04

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Install Just
  #       run: |
  #         curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin
  #         echo "$HOME/bin" >> $GITHUB_PATH

  #     - name: Install uv
  #       run: |
  #         curl -LsSf https://astral.sh/uv/install.sh | sh
  #         source $HOME/.cargo/env
  #         echo "$HOME/.cargo/bin" >> $GITHUB_PATH

  #     - name: Install system dependencies for spellcheck
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y enchant-2 libenchant-2-dev

  #     - name: Verify toolchain installation
  #       run: |
  #         just --version
  #         uv --version

  #     - name: Setup uv cache
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ env.UV_CACHE_DIR }}
  #         key:
  #           uv-cache-ubuntu-spell-${{ hashFiles('pyproject.toml')
  #           }}
  #         restore-keys: |
  #           uv-cache-ubuntu-spell-

  #     - name: Create Python environment and install tools
  #       run: |
  #         just create cpy314
  #         just install-tools cpy314

  #     - name: Run spellcheck
  #       run: |
  #         # Navigate to docs directory and run sphinx spellcheck
  #         cd docs && ../.venvs/cpy314/bin/sphinx-build -b spelling . _spelling

  # FIXME: 1 warning, 52 errors in 0.82s
  #
  # tests:
  #   name: Test Suite
  #   runs-on: ubuntu-24.04

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Install Just
  #       run: |
  #         curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin
  #         echo "$HOME/bin" >> $GITHUB_PATH

  #     - name: Install uv
  #       run: |
  #         curl -LsSf https://astral.sh/uv/install.sh | sh
  #         source $HOME/.cargo/env
  #         echo "$HOME/.cargo/bin" >> $GITHUB_PATH

  #     - name: Verify toolchain installation
  #       run: |
  #         just --version
  #         uv --version

  #     - name: Setup uv cache
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ env.UV_CACHE_DIR }}
  #         key:
  #           uv-cache-ubuntu-test-${{ hashFiles('pyproject.toml')
  #           }}
  #         restore-keys: |
  #           uv-cache-ubuntu-test-

  #     - name: Create Python environment and install package
  #       run: |
  #         just create cpy314
  #         just install-tools cpy314
  #         just install-dev cpy314

  #     - name: Run test suite
  #       run: just test cpy314

  build-schema:
    name: FlatBuffers Schema Build
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        python-env: [cpy314, cpy311, pypy311]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Install uv (Astral)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.cargo/env
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install FlatBuffers compiler
        run: |
          # Install exact same version as used in development (v25.9.23)
          FLATC_VERSION="25.9.23"
          FLATC_URL="https://github.com/google/flatbuffers/releases/download/v${FLATC_VERSION}/Linux.flatc.binary.g++-13.zip"
          TEMP_DIR=$(mktemp -d)

          echo "==> Installing FlatBuffers compiler v${FLATC_VERSION}..."
          cd "${TEMP_DIR}"
          curl -L -o flatc.zip "${FLATC_URL}"
          unzip flatc.zip
          sudo mv flatc /usr/local/bin/flatc
          sudo chmod +x /usr/local/bin/flatc
          rm -rf "${TEMP_DIR}"

          # Install cloc for code statistics
          sudo apt-get update
          sudo apt-get install -y cloc

      - name: Verify toolchain installation
        run: |
          just --version
          uv --version
          flatc --version

      - name: Setup uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key:
            uv-cache-ubuntu-fbs-${{ matrix.python-env }}-${{
            hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-cache-ubuntu-fbs-${{ matrix.python-env }}-
            uv-cache-ubuntu-fbs-

      - name: Create Python environment
        run: |
          just create ${{ matrix.python-env }}
          just install-tools ${{ matrix.python-env }}

      - name: Store original generated files checksum
        run: |
          echo "==> Computing checksums of committed FlatBuffers files..."
          find autobahn/wamp/gen/ -name "*.py" -o -name "*.bfbs" | sort | xargs sha256sum > /tmp/original-checksums.txt
          echo "Found $(wc -l < /tmp/original-checksums.txt) committed generated files"

      - name: Build FlatBuffers binary schema & Python wrappers
        run: just build-fbs

      - name: List FlatBuffers artifacts
        run: |
          flatc --version
          echo "Generated FlatBuffers binary schema & Python wrappers:"
          echo "======================================================"
          cloc autobahn/wamp/gen/
          echo ""
          ls -la autobahn/wamp/gen/schema/
          echo ""
          openssl sha256 autobahn/wamp/gen/schema/*.bfbs
          echo ""

      - name: Verify regenerated files match committed files
        run: |
          echo "==> Computing checksums of regenerated files..."
          find autobahn/wamp/gen/ -name "*.py" -o -name "*.bfbs" | sort | xargs sha256sum > /tmp/regenerated-checksums.txt

          echo "==> Comparing checksums..."
          if diff -u /tmp/original-checksums.txt /tmp/regenerated-checksums.txt; then
            echo "✅ SUCCESS: All regenerated FlatBuffers files match committed versions exactly!"
            echo "This confirms the build process is reproducible and up-to-date."
          else
            echo "❌ FAILURE: Regenerated files differ from committed versions!"
            echo ""
            echo "This indicates either:"
            echo "1. The committed files were generated with a different flatc version"
            echo "2. The committed files were manually modified"
            echo "3. The build process has changed since files were last committed"
            echo ""
            echo "Please run 'just clean-fbs && just build-fbs' locally and commit the results."
            exit 1
          fi

      - name: Upload FlatBuffers artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flatbuffers-schema-${{ matrix.python-env }}
          path: autobahn/wamp/gen/
          retention-days: 7

  build-package:
    name: Package Build
    runs-on: ubuntu-24.04
    needs: [quality-checks, build-schema]
    #    needs: [quality-checks, tests, build-schema]

    strategy:
      matrix:
        python-env: [cpy314, cpy311, pypy311]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Install uv (Astral)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.cargo/env
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify toolchain installation
        run: |
          just --version
          uv --version

      - name: Setup uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key:
            uv-cache-ubuntu-build-${{ matrix.python-env }}-${{
            hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-cache-ubuntu-build-${{ matrix.python-env }}-
            uv-cache-ubuntu-build-

      - name: Create Python environment and install tools
        run: |
          just create ${{ matrix.python-env }}
          just install-tools ${{ matrix.python-env }}

      - name: Build package
        run: just build ${{ matrix.python-env }}

      - name: List built artifacts
        run: |
          echo "Built artifacts for ${{ matrix.python-env }}:"
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.python-env }}
          path: dist/
          retention-days: 14
