name: wheels

on:
  # Build wheels on feature branches and PRs (test only)
  push:
    branches: ["**"]
  pull_request:
    branches: [master]

  # Publish to GitHub Releases when merged to master
  # Publish to PyPI when tagged
  workflow_dispatch:

env:
  # Ensure uv and just are available in PATH
  UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache

jobs:
  identifiers:
    # GitHub needs to know where .cicd/workflows/identifiers.yml lives at parse time,
    # and submodules aren't included in that context! thus the following does NOT work:
    # uses: ./.cicd/workflows/identifiers.yml
    # we MUST reference the remote repo directly:
    uses: wamp-proto/wamp-cicd/workflows/identifiers.yml@main
    # IMPORTANT: we still need .cicd as a Git submodule in the using repo though!
    # because e.g. identifiers.yml wants to access scripts/sanitize.sh !

  build-wheels:
    name: Build wheels on ${{ matrix.os }} (${{ matrix.arch }})
    needs: identifiers
    runs-on: ${{ matrix.os }}

    env:
      BASE_REPO: ${{ needs.identifiers.outputs.base_repo }}
      BASE_BRANCH: ${{ needs.identifiers.outputs.base_branch }}
      PR_NUMBER: ${{ needs.identifiers.outputs.pr_number }}
      PR_REPO: ${{ needs.identifiers.outputs.pr_repo }}
      PR_BRANCH: ${{ needs.identifiers.outputs.pr_branch }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # ===========================================================
          # ‚ö†Ô∏è IMPORTANT NOTES ABOUT "arch" IN GITHUB ACTIONS ‚ö†Ô∏è
          #
          # - GitHub Actions DOES NOT respect `arch:` for runner selection.
          # - The *only* thing that decides which CPU architecture you get
          #   is the `runs-on:` label (e.g. ubuntu-24.04 vs ubuntu-24.04-arm64).
          # - Any `arch:` key you see in a matrix is just *your own metadata*.
          #   It has NO effect on which runner is provisioned. ZERO. ZILCH.
          # - This is confusing as hell, because many people expect `arch:`
          #   to actually request AMD64 vs ARM64, but GitHub silently ignores it.
          #
          # So: we put `arch:` in here purely for naming artifacts or using
          # conditional logic in steps. But the "real" architecture is
          # locked in by the value of `runs-on: ${{ matrix.os }}` below.
          #
          # ===========================================================

          # ===========================================================
          # ü§¶‚Äç‚ôÇÔ∏èIMPORTANT NOTES ABOUT GITHUB ACTIONS RUNNER AVAILABILITY PAR ü§¶‚Äç‚ôÇÔ∏è
          #
          # I. GitHub's runner availability is... "special":
          #
          # ‚úÖ ALWAYS AVAILABLE (Fast, < 30 seconds):
          #   - ubuntu-* (x86_64)     ‚Üí Abundant, instant
          #   - windows-* (x86_64)    ‚Üí Reliable, quick
          #   - macos-15 (ARM64)      ‚Üí Apple Silicon, readily available
          #
          # üïê "PLEASE WAIT FOREVER" ZONE (Often > 1 hour waits):
          #   - ubuntu-*-arm64        ‚Üí Limited pool, beta status
          #   - macos-12/13 (Intel)   ‚Üí Legacy hardware, being phased out
          #
          # WHY THIS HAPPENS:
          # 1. GitHub prioritizes current hardware (ARM64 macOS > Intel macOS)
          # 2. ARM64 Linux runners are still beta/limited capacity
          # 3. Intel Macs are being phased out of GitHub's fleet
          #
          # II. There is no built-in way in Actions to auto-cancel a job if it
          # stays queued too long waiting for a specific runner label.
          #
          #   ‚ÄúCancel this job if no runner has picked it up after 2 minutes.‚Äù
          #
          # This is another of those ‚ÄúWTF‚Äù gaps in Actions.
          # ===========================================================

          # --- Linux ---
          - os: ubuntu-24.04 # ‚úÖ GitHub-hosted Linux x86_64 (most common, always fast)
            platform: linux
            arch: x86_64

          # --- macOS ---
          - os: macos-15 # ‚úÖ GitHub-hosted macOS Apple Silicon (current Macs, fast)
            platform: macos
            arch: arm64

          # --- Windows ---
          - os: windows-2022 # ‚úÖ GitHub-hosted Windows x86_64 (mostly fast)
            platform: windows
            arch: x86_64

          # --- Linux ---
          # - os: ubuntu-24.04-arm64 # üïê Linux ARM64 (servers/edge, often waits forever)
          #   platform: linux
          #   arch: arm64

          # --- macOS ---
          # - os: macos-12 # üïê Intel macOS (legacy users, increasingly scarce, often waits forever)
          #   platform: macos
          #   arch: x86_64

          # --- Windows ---
          # ‚ö†Ô∏è GitHub does NOT provide Windows ARM64 hosted runners.
          #    If you want Windows ARM64 builds, you must either:
          #      - run a self-hosted Windows ARM64 runner, OR
          #      - cross-compile from AMD64 to ARM64 inside the workflow.

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # we use the standard upstream installation on non-broken platforms.
      - name: Install Just (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      # we need to use this install wrapper on inheritently broken platforms (windows/powershell).
      - name: Install Just (Windows)
        if: runner.os == 'Windows'
        uses: extractions/setup-just@v3
        with:
          just-version: "1.42.3"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # we use the standard upstream installation on non-broken platforms.
      - name: Install uv (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.cargo/env
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # we need to use this install wrapper on inheritently broken platforms (windows/powershell).
      - name: Install uv (Windows)
        if: runner.os == 'Windows'
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.7.19"
          enable-cache: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify toolchain installation (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          just --version
          uv --version
        shell: bash

      - name: Verify toolchain installation (Windows)
        if: runner.os == 'Windows'
        run: |
          just --version
          uv --version
        shell: pwsh

      - name: Setup uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key:
            uv-cache-${{ matrix.platform }}-${{ matrix.arch
            }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-cache-${{ matrix.platform }}-${{ matrix.arch }}-
            uv-cache-${{ matrix.platform }}-

      - name: Build pure Python wheels (Linux only)
        if: matrix.platform == 'linux'
        run: |
          # Build pure Python wheels WITHOUT NVX acceleration
          # This provides maximum compatibility across Linux distributions
          export AUTOBAHN_USE_NVX=0
          just build-all
        shell: bash

      - name: Build binary wheels with NVX (macOS)
        if: matrix.platform == 'macos'
        run: |
          # Build binary wheels WITH NVX acceleration for macOS
          export AUTOBAHN_USE_NVX=1
          just build-all
        shell: bash

      - name: Build binary wheels with NVX (Windows)
        if: matrix.platform == 'windows'
        run: |
          # Build binary wheels WITH NVX acceleration for Windows
          $env:AUTOBAHN_USE_NVX = "1"
          just build-all
        shell: pwsh

      - name: List built artifacts (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Built wheels:"
          ls -la dist/
        shell: bash

      - name: List built artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          Write-Host "Built wheels:"
          Get-ChildItem dist
        shell: pwsh

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/*.whl
          retention-days: 30

      - name: Verify wheels built without NVX (Linux x86_64 only)
        if: matrix.platform == 'linux' && matrix.arch == 'x86_64'
        run: |
          # Verify that wheels were built without NVX acceleration
          echo "==> Wheels built without NVX (should be pure Python or at least NVX-free):"
          ls -la dist/*.whl || echo "No wheels found"
          echo ""
          echo "==> Source distribution:"
          ls -la dist/*.tar.gz || echo "No source dist found"
          echo ""
          echo "==> Wheel count: $(ls dist/*.whl 2>/dev/null | wc -l)"
        shell: bash

      - name: Upload source distribution (Linux x86_64 only)
        if: matrix.platform == 'linux' && matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: source-distribution
          path: dist/*.tar.gz
          retention-days: 30

      - name: Upload Linux wheels without NVX (Linux x86_64 only)
        if: matrix.platform == 'linux' && matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: linux-wheels-no-nvx
          path: dist/*.whl
          retention-days: 30

  # GitHub Releases, PyPI, and RTD publishing are now handled by the centralized 'release' workflow
