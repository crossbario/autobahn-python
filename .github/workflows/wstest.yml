name: wstest

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      test_mode:
        description: "Test mode to run"
        required: false
        default: "quick"
        type: choice
        options:
          - quick
          - full

env:
  UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache
  # Test mode: 'quick' for fast CI, 'full' for comprehensive testing
  TEST_MODE: ${{ github.event.inputs.test_mode || 'quick' }}

jobs:
  # Client testing: Test autobahn-python clients against testsuite server
  client-conformance:
    name: WebSocket Client Testing (${{ matrix.backend }})
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        backend: [twisted, asyncio]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.cargo/env
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify toolchain installation
        run: |
          just --version
          uv --version
          docker --version

      - name: Setup uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-cache-ubuntu-wstest-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-cache-ubuntu-wstest-

      - name: Setup Python environment
        run: |
          just create cpy314
          just install cpy314

      - name: Install Autobahn|Testsuite Docker image
        run: just install-wstest

      - name: Start Autobahn|Testsuite server (background)
        run: |
          echo "==> Starting Autobahn|Testsuite server in background..."
          nohup just wstest-fuzzingserver > fuzzingserver.log 2>&1 &
          echo $! > fuzzingserver.pid
          
          # Wait for server to be ready
          echo "==> Waiting for fuzzingserver to be ready..."
          sleep 15
          
          # Verify server is running
          if ! docker ps | grep -q fuzzingserver; then
            echo "❌ Fuzzingserver failed to start"
            cat fuzzingserver.log
            exit 1
          fi
          echo "✅ Fuzzingserver is running"

      - name: Test ${{ matrix.backend }} client
        run: |
          echo "==> Testing ${{ matrix.backend }} WebSocket client..."
          if [ "${{ matrix.backend }}" = "twisted" ]; then
            just wstest-testeeclient-twisted cpy314
          else
            just wstest-testeeclient-asyncio cpy314
          fi

      - name: Stop fuzzingserver and collect results
        if: always()
        run: |
          echo "==> Stopping fuzzingserver..."
          if [ -f fuzzingserver.pid ]; then
            kill $(cat fuzzingserver.pid) || true
          fi
          docker stop fuzzingserver || true
          
          echo "==> Client test results for ${{ matrix.backend }}:"
          ls -la .wstest/clients/ || echo "No client reports found"

      - name: Upload client test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: client-reports-${{ matrix.backend }}-${{ env.TEST_MODE }}
          path: .wstest/clients/
          retention-days: 30

  # Server testing: Test both autobahn-python servers against testsuite client
  server-conformance:
    name: WebSocket Server Testing
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.cargo/env
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify toolchain installation
        run: |
          just --version
          uv --version
          docker --version

      - name: Setup uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-cache-ubuntu-wstest-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-cache-ubuntu-wstest-

      - name: Setup Python environment
        run: |
          just create cpy314
          just install cpy314

      - name: Install Autobahn|Testsuite Docker image
        run: just install-wstest

      - name: Start Autobahn|Python servers (background)
        run: |
          echo "==> Starting Twisted server on port 9011..."
          nohup .venvs/cpy314/bin/python ./wstest/testee_server_tx.py --url ws://127.0.0.1:9011 > twisted-server.log 2>&1 &
          echo $! > twisted-server.pid
          
          echo "==> Starting asyncio server on port 9012..."
          nohup .venvs/cpy314/bin/python ./wstest/testee_server_aio.py --url ws://127.0.0.1:9012 > asyncio-server.log 2>&1 &
          echo $! > asyncio-server.pid
          
          # Wait for servers to be ready
          echo "==> Waiting for servers to be ready..."
          sleep 15
          
          # Verify both servers are listening
          if ! netstat -tlnp | grep -q ":9011"; then
            echo "❌ Twisted server failed to start on port 9011"
            cat twisted-server.log
            exit 1
          fi
          
          if ! netstat -tlnp | grep -q ":9012"; then
            echo "❌ asyncio server failed to start on port 9012"
            cat asyncio-server.log
            exit 1
          fi
          
          echo "✅ Both servers are running"
          netstat -tlnp | grep -E ":(9011|9012)"

      - name: Test servers with fuzzingclient
        run: |
          echo "==> Testing both Autobahn|Python servers..."
          just wstest-fuzzingclient

      - name: Stop servers and collect results
        if: always()
        run: |
          echo "==> Stopping servers..."
          if [ -f twisted-server.pid ]; then
            kill $(cat twisted-server.pid) || true
          fi
          if [ -f asyncio-server.pid ]; then
            kill $(cat asyncio-server.pid) || true
          fi
          
          echo "==> Server test results:"
          ls -la .wstest/servers/ || echo "No server reports found"

      - name: Upload server test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: server-reports-${{ env.TEST_MODE }}
          path: .wstest/servers/
          retention-days: 30

  # Consolidate all reports
  consolidate-reports:
    name: Consolidate WebSocket Reports
    needs: [client-conformance, server-conformance]
    runs-on: ubuntu-24.04
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all WebSocket reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-reports-*"
          merge-multiple: false
          path: all-reports/

      - name: Consolidate test reports for documentation
        run: |
          mkdir -p docs/_static/websocket/conformance
          
          echo "==> Consolidating WebSocket conformance test reports..."
          
          # Copy client reports to docs/_static
          for backend in twisted asyncio; do
            client_dir="client-reports-${backend}-${{ env.TEST_MODE }}"
            if [ -d "all-reports/${client_dir}" ]; then
              echo "Copying ${backend} client reports..."
              cp -r "all-reports/${client_dir}"/* "docs/_static/websocket/conformance/" || true
            else
              echo "⚠️  Client report directory not found: ${client_dir}"
            fi
          done
          
          # Copy server reports to docs/_static
          server_dir="server-reports-${{ env.TEST_MODE }}"
          if [ -d "all-reports/${server_dir}" ]; then
            echo "Copying server reports..."
            cp -r "all-reports/${server_dir}"/* "docs/_static/websocket/conformance/" || true
          else
            echo "⚠️  Server report directory not found: ${server_dir}"
          fi
          
          # Create ZIP archive of all JSON test reports
          echo "==> Creating JSON reports archive..."
          find docs/_static/websocket/conformance -name "*.json" -type f > json_files.txt
          if [ -s json_files.txt ]; then
            json_count=$(wc -l < json_files.txt)
            echo "Found ${json_count} JSON test report files"
            zip -r "docs/_static/websocket/conformance/conformance-reports-${{ env.TEST_MODE }}.zip" -@ < json_files.txt
            echo "✅ Created conformance-reports-${{ env.TEST_MODE }}.zip with ${json_count} JSON files"
          else
            echo "⚠️  No JSON test report files found"
          fi
          
          echo "✅ Test reports consolidated for documentation"
          echo "HTML reports: docs/_static/websocket/conformance/"
          ls -la docs/_static/websocket/conformance/ | head -10

      - name: Upload consolidated WebSocket reports
        uses: actions/upload-artifact@v4
        with:
          name: websocket-conformance-docs-${{ env.TEST_MODE }}
          path: docs/_static/websocket/conformance/
          retention-days: 30

      - name: Report summary
        run: |
          echo "==> WebSocket Conformance Testing Complete"
          echo "Test Mode: ${{ env.TEST_MODE }}"
          echo "Reports integrated into documentation:"
          find docs/_static/websocket/conformance -name "index.html" | sort
          echo ""
          if [ -f docs/_static/websocket/conformance/conformance-reports-${{ env.TEST_MODE }}.zip ]; then
            echo "📦 JSON reports archive: conformance-reports-${{ env.TEST_MODE }}.zip"
          fi
          echo "📄 HTML reports available in docs/_static/websocket/conformance/"
          echo "🔗 All reports available in job artifacts"