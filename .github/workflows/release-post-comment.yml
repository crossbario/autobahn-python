name: release-post-comment

on:
  # Trigger after release workflow completes (ensures all 4 base workflows finished)
  # release.yml waits for: wheels, wheels-docker, wstest, main
  workflow_run:
    workflows: ["release"]
    types: [completed]

  # Manual dispatch for debugging
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to post summary for"
        required: false
        type: string

permissions:
  pull-requests: write  # Required for posting PR comments
  contents: read        # Required for reading artifacts

jobs:
  identifiers:
    # GitHub needs to know where .cicd/workflows/identifiers.yml lives at parse time,
    # and submodules aren't included in that context! thus the following does NOT work:
    # uses: ./.cicd/workflows/identifiers.yml
    # we MUST reference the remote repo directly:
    uses: wamp-proto/wamp-cicd/.github/workflows/identifiers.yml@main
    # IMPORTANT: we still need .cicd as a Git submodule in the using repo though!
    # because e.g. identifiers.yml wants to access scripts/sanitize.sh !

  # Development release: Post PR summary comment for development builds
  post-pr-comment:
    name: Post PR Comment (Development Builds)
    needs: identifiers
    runs-on: ubuntu-latest

    # Only run for PR/development contexts and successful release runs
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' &&
      needs.identifiers.outputs.release_type == 'development'

    env:
      BASE_REPO: ${{ needs.identifiers.outputs.base_repo }}
      BASE_BRANCH: ${{ needs.identifiers.outputs.base_branch }}
      PR_NUMBER: ${{ needs.identifiers.outputs.pr_number }}
      PR_REPO: ${{ needs.identifiers.outputs.pr_repo }}
      PR_BRANCH: ${{ needs.identifiers.outputs.pr_branch }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Find wstest workflow run ID
        id: find-wstest
        uses: actions/github-script@v7
        with:
          script: |
            const commitSha = context.payload.workflow_run.head_sha;
            console.log(`Finding wstest workflow for commit: ${commitSha}`);

            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: commitSha,
              per_page: 100
            });

            const wstestRun = runs.workflow_runs.find(run =>
              run.name === 'wstest' &&
              run.status === 'completed' &&
              run.conclusion === 'success'
            );

            if (wstestRun) {
              console.log(`Found wstest run: ${wstestRun.id}`);
              core.setOutput('run_id', wstestRun.id);
            } else {
              console.log('⚠️  wstest workflow not found');
              core.setOutput('run_id', '');
            }

      - name: Download wstest conformance summary
        if: steps.find-wstest.outputs.run_id != ''
        uses: actions/download-artifact@v4
        with:
          pattern: conformance-summary-*
          merge-multiple: true
          run-id: ${{ steps.find-wstest.outputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: summary-artifact/
        continue-on-error: true

      - name: Install jinja2-cli for template rendering
        run: |
          pip install jinja2-cli

      - name: Render PR comment from Jinja2 template
        id: render
        run: |
          echo "==> Preparing PR comment using Jinja2 template..."

          # Collect template variables from identifiers
          # Strip 'pr' prefix from PR_NUMBER for gh command
          PR_NUMBER_CLEAN="${PR_NUMBER#pr}"
          COMMIT_SHA="${{ needs.identifiers.outputs.head_sha }}"
          BUILD_DATE="$(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          WORKFLOW_RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${{ github.event.workflow_run.id }}"

          # Read wstest summary if available, otherwise use placeholder
          WSTEST_SUMMARY="WebSocket conformance testing results not available."
          SUMMARY_FILE=$(find summary-artifact/ -name "*wstest-summary.md" 2>/dev/null | head -1)
          if [[ -n "$SUMMARY_FILE" && -f "$SUMMARY_FILE" ]]; then
            echo "✅ Found wstest summary: $SUMMARY_FILE"
            WSTEST_SUMMARY=$(cat "$SUMMARY_FILE")
            WHEEL_COUNT="N/A"  # Could query artifacts if needed
          else
            echo "⚠️  No wstest summary found, using placeholder"
            WHEEL_COUNT="N/A"
          fi

          # Render template using jinja2
          jinja2 .github/templates/release-development.md.j2 \
            -D pr_number="$PR_NUMBER" \
            -D pr_repo="$PR_REPO" \
            -D pr_branch="$PR_BRANCH" \
            -D base_repo="$BASE_REPO" \
            -D base_branch="$BASE_BRANCH" \
            -D commit_sha="$COMMIT_SHA" \
            -D build_date="$BUILD_DATE" \
            -D workflow_run_url="$WORKFLOW_RUN_URL" \
            -D wheel_count="$WHEEL_COUNT" \
            -D wstest_summary="$WSTEST_SUMMARY" \
            -o pr-comment.md

          echo ""
          echo "==> Generated PR comment:"
          cat pr-comment.md

          # Save clean PR number for posting
          echo "pr_number_clean=$PR_NUMBER_CLEAN" >> $GITHUB_OUTPUT

          # Check if we should post comment
          if [[ -n "$SUMMARY_FILE" && -f "$SUMMARY_FILE" ]]; then
            echo "should_comment=true" >> $GITHUB_OUTPUT
          else
            echo "should_comment=false" >> $GITHUB_OUTPUT
          fi

      - name: Post PR comment using GitHub CLI
        if: steps.render.outputs.should_comment == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "==> Posting comment to PR #${{ steps.render.outputs.pr_number_clean }}..."
          gh pr comment "${{ steps.render.outputs.pr_number_clean }}" \
            --repo "$GITHUB_REPOSITORY" \
            --body-file pr-comment.md
          echo "✅ PR comment posted successfully"

      - name: Skip PR comment
        if: steps.render.outputs.should_comment == 'false'
        run: |
          echo "ℹ️  Skipping PR comment - wstest summary not available"
