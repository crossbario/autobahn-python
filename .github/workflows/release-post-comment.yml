name: release-post-comment

on:
  # Trigger after release workflow completes (ensures all 4 base workflows finished)
  # release.yml waits for: wheels, wheels-docker, wstest, main
  workflow_run:
    workflows: ["release"]
    types: [completed]

  # Manual dispatch for debugging
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to post summary for"
        required: false
        type: string
      discussion_category_id:
        description: "GitHub Discussions category ID for announcements"
        required: false
        type: string
        default: "DIC_kwDOAP_4P84CkZFU"  # Find via: gh api graphql -f query='query {repository(owner:"crossbario", name:"autobahn-python") {discussionCategories(first:10) {nodes {id name}}}}'

permissions:
  pull-requests: write  # Required for posting PR comments
  contents: read        # Required for reading artifacts
  discussions: write    # Required for posting to discussions

jobs:
  check-event-context:
    name: Check event context and release type
    runs-on: ubuntu-latest
    outputs:
      should_process: ${{ steps.check.outputs.should_process }}
      release_type: ${{ steps.check.outputs.release_type }}
      event_type: ${{ steps.check.outputs.event_type }}
      release_run_id: ${{ steps.check.outputs.release_run_id }}
      release_conclusion: ${{ steps.check.outputs.release_conclusion }}

    steps:
      - name: Check workflow trigger context
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            console.log('─────────────────────────────────────────────────');
            console.log('🔍 Checking workflow trigger context');
            console.log('─────────────────────────────────────────────────');
            console.log(`Event: ${context.eventName}`);

            let shouldProcess = false;
            let eventType = 'unknown';
            let releaseRunId = '';
            let releaseConclusion = 'unknown';

            if (context.eventName === 'workflow_run') {
              const triggeringWorkflow = context.payload.workflow_run.name;
              const triggeringEvent = context.payload.workflow_run.event;
              const conclusion = context.payload.workflow_run.conclusion;

              releaseRunId = context.payload.workflow_run.id;
              releaseConclusion = conclusion;

              console.log(`Triggered by: ${triggeringWorkflow}`);
              console.log(`Original event: ${triggeringEvent}`);
              console.log(`Conclusion: ${conclusion}`);
              console.log(`Release run ID: ${releaseRunId}`);

              // We only process when:
              // 1. Triggered by "release" workflow
              // 2. Release workflow completed successfully
              // 3. Original event was pull_request (development) or push (nightly/stable)
              if (triggeringWorkflow === 'release' && conclusion === 'success') {
                if (triggeringEvent === 'pull_request') {
                  shouldProcess = true;
                  eventType = 'development';
                  console.log('✅ Development/PR build detected - will post PR comment');
                } else if (triggeringEvent === 'push' || triggeringEvent === 'workflow_dispatch') {
                  shouldProcess = true;
                  eventType = 'nightly_or_stable';
                  console.log('✅ Nightly or stable build detected - will post to Discussions');
                } else {
                  console.log(`⏭️  Skipping - unexpected event type: ${triggeringEvent}`);
                }
              } else if (triggeringWorkflow !== 'release') {
                console.log(`⏭️  Skipping - not triggered by release workflow`);
              } else if (conclusion !== 'success') {
                console.log(`⏭️  Skipping - release workflow did not succeed: ${conclusion}`);
              }
            } else if (context.eventName === 'workflow_dispatch') {
              shouldProcess = true;
              eventType = 'manual';
              console.log('✅ Manual dispatch - will process based on identifiers');
            } else {
              console.log(`⏭️  Skipping - unexpected event: ${context.eventName}`);
            }

            console.log('─────────────────────────────────────────────────');

            core.setOutput('should_process', shouldProcess ? 'true' : 'false');
            core.setOutput('event_type', eventType);
            core.setOutput('release_run_id', releaseRunId);
            core.setOutput('release_conclusion', releaseConclusion);

  identifiers:
    needs: check-event-context
    if: needs.check-event-context.outputs.should_process == 'true'
    # GitHub needs to know where .cicd/workflows/identifiers.yml lives at parse time,
    # and submodules aren't included in that context! thus the following does NOT work:
    # uses: ./.cicd/workflows/identifiers.yml
    # we MUST reference the remote repo directly:
    uses: wamp-proto/wamp-cicd/.github/workflows/identifiers.yml@main
    # IMPORTANT: we still need .cicd as a Git submodule in the using repo though!
    # because e.g. identifiers.yml wants to access scripts/sanitize.sh !

  # Development release: Post PR summary comment for development builds
  post-pr-comment:
    name: Post PR Comment (Development Builds)
    needs: [check-event-context, identifiers]
    runs-on: ubuntu-latest

    # Only run for development/PR builds (explicit positive list)
    if: |
      needs.check-event-context.outputs.should_process == 'true' &&
      needs.identifiers.outputs.release_type == 'development'

    env:
      BASE_REPO: ${{ needs.identifiers.outputs.base_repo }}
      BASE_BRANCH: ${{ needs.identifiers.outputs.base_branch }}
      PR_NUMBER: ${{ needs.identifiers.outputs.pr_number }}
      PR_REPO: ${{ needs.identifiers.outputs.pr_repo }}
      PR_BRANCH: ${{ needs.identifiers.outputs.pr_branch }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Find wstest workflow run ID
        id: find-wstest
        uses: actions/github-script@v7
        with:
          script: |
            const commitSha = context.payload.workflow_run.head_sha;
            console.log(`Finding wstest workflow for commit: ${commitSha}`);

            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: commitSha,
              per_page: 100
            });

            const wstestRun = runs.workflow_runs.find(run =>
              run.name === 'wstest' &&
              run.status === 'completed' &&
              run.conclusion === 'success'
            );

            if (wstestRun) {
              console.log(`Found wstest run: ${wstestRun.id}`);
              core.setOutput('run_id', wstestRun.id);
            } else {
              console.log('⚠️  wstest workflow not found');
              core.setOutput('run_id', '');
            }

      - name: Download wstest conformance summary
        if: steps.find-wstest.outputs.run_id != ''
        uses: actions/download-artifact@v4
        with:
          pattern: conformance-summary-*
          merge-multiple: true
          run-id: ${{ steps.find-wstest.outputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: summary-artifact/
        continue-on-error: true

      - name: Install jinja2-cli for template rendering
        run: |
          pip install jinja2-cli

      - name: Render PR comment from Jinja2 template
        id: render
        run: |
          echo "==> Preparing PR comment using Jinja2 template..."

          # Collect template variables from identifiers
          # Strip 'pr' prefix from PR_NUMBER for gh command
          PR_NUMBER_CLEAN="${PR_NUMBER#pr}"
          COMMIT_SHA="${{ needs.identifiers.outputs.head_sha }}"
          BUILD_DATE="$(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          WORKFLOW_RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${{ github.event.workflow_run.id }}"

          # Read wstest summary if available, otherwise use placeholder
          WSTEST_SUMMARY="WebSocket conformance testing results not available."
          SUMMARY_FILE=$(find summary-artifact/ -name "*wstest-summary.md" 2>/dev/null | head -1)
          if [[ -n "$SUMMARY_FILE" && -f "$SUMMARY_FILE" ]]; then
            echo "✅ Found wstest summary: $SUMMARY_FILE"
            WSTEST_SUMMARY=$(cat "$SUMMARY_FILE")
            WHEEL_COUNT="N/A"  # Could query artifacts if needed
          else
            echo "⚠️  No wstest summary found, using placeholder"
            WHEEL_COUNT="N/A"
          fi

          # Render template using jinja2
          jinja2 .github/templates/release-development.md.j2 \
            -D pr_number="$PR_NUMBER" \
            -D pr_repo="$PR_REPO" \
            -D pr_branch="$PR_BRANCH" \
            -D base_repo="$BASE_REPO" \
            -D base_branch="$BASE_BRANCH" \
            -D commit_sha="$COMMIT_SHA" \
            -D build_date="$BUILD_DATE" \
            -D workflow_run_url="$WORKFLOW_RUN_URL" \
            -D wheel_count="$WHEEL_COUNT" \
            -D wstest_summary="$WSTEST_SUMMARY" \
            -o pr-comment.md

          echo ""
          echo "==> Generated PR comment:"
          cat pr-comment.md

          # Save clean PR number for posting
          echo "pr_number_clean=$PR_NUMBER_CLEAN" >> $GITHUB_OUTPUT

          # Check if we should post comment
          if [[ -n "$SUMMARY_FILE" && -f "$SUMMARY_FILE" ]]; then
            echo "should_comment=true" >> $GITHUB_OUTPUT
          else
            echo "should_comment=false" >> $GITHUB_OUTPUT
          fi

      - name: Post PR comment using GitHub CLI
        if: steps.render.outputs.should_comment == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "==> Posting comment to PR #${{ steps.render.outputs.pr_number_clean }}..."
          gh pr comment "${{ steps.render.outputs.pr_number_clean }}" \
            --repo "$GITHUB_REPOSITORY" \
            --body-file pr-comment.md
          echo "✅ PR comment posted successfully"

      - name: Skip PR comment
        if: steps.render.outputs.should_comment == 'false'
        run: |
          echo "ℹ️  Skipping PR comment - wstest summary not available"

  # Nightly and Stable releases: Post to GitHub Discussions
  post-discussion:
    name: Post to GitHub Discussions (Nightly & Stable)
    needs: [check-event-context, identifiers]
    runs-on: ubuntu-latest

    # Only run for nightly or stable builds (explicit positive list)
    if: |
      needs.check-event-context.outputs.should_process == 'true' &&
      (needs.identifiers.outputs.release_type == 'nightly' || needs.identifiers.outputs.release_type == 'stable')

    env:
      RELEASE_TYPE: ${{ needs.identifiers.outputs.release_type }}
      RELEASE_NAME: ${{ needs.identifiers.outputs.release_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get release details from GitHub Release
        id: release-details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "==> Fetching release details for: $RELEASE_NAME"

          # Get release info via GitHub API
          RELEASE_JSON=$(gh api repos/$GITHUB_REPOSITORY/releases/tags/$RELEASE_NAME 2>/dev/null || echo "{}")

          if [ "$RELEASE_JSON" = "{}" ]; then
            echo "⚠️  Release not found: $RELEASE_NAME"
            echo "release_found=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Release found: $RELEASE_NAME"
            echo "release_found=true" >> $GITHUB_OUTPUT

            # Extract release URL
            RELEASE_URL=$(echo "$RELEASE_JSON" | jq -r '.html_url')
            echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT

            # Save release body for discussion
            echo "$RELEASE_JSON" | jq -r '.body' > release-body.md
          fi

      - name: Install jinja2-cli for template rendering
        if: steps.release-details.outputs.release_found == 'true'
        run: |
          pip install jinja2-cli

      - name: Render discussion post from template
        if: steps.release-details.outputs.release_found == 'true'
        id: render
        run: |
          echo "==> Preparing GitHub Discussion post..."
          echo "Release type: $RELEASE_TYPE"
          echo "Release name: $RELEASE_NAME"

          # Get release information
          COMMIT_SHA="${{ needs.identifiers.outputs.head_sha }}"
          BUILD_DATE="$(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          RELEASE_URL="${{ steps.release-details.outputs.release_url }}"

          # Read release body
          RELEASE_BODY=$(cat release-body.md)

          # Create discussion body with link to release and full release notes
          cat > discussion-post.md <<'EOF'
          $RELEASE_BODY

          ---

          **📦 [View Full Release on GitHub]($RELEASE_URL)**

          Download wheels, source distributions, and other artifacts from the release page.
          EOF

          # Replace variables
          sed -i "s|\$RELEASE_BODY|$RELEASE_BODY|g" discussion-post.md
          sed -i "s|\$RELEASE_URL|$RELEASE_URL|g" discussion-post.md

          echo ""
          echo "==> Generated discussion post:"
          cat discussion-post.md

      - name: Post to GitHub Discussions
        if: steps.release-details.outputs.release_found == 'true'
        uses: actions/github-script@v7
        env:
          DISCUSSION_CATEGORY_ID: ${{ github.event.inputs.discussion_category_id || 'DIC_kwDOAP_4P84CkZFU' }}
        with:
          script: |
            const fs = require('fs');
            const discussionBody = fs.readFileSync('discussion-post.md', 'utf8');

            const releaseType = '${{ env.RELEASE_TYPE }}';
            const releaseName = '${{ env.RELEASE_NAME }}';

            // Set title based on release type
            const title = releaseType === 'stable'
              ? `Release ${releaseName}`
              : `Nightly Build ${releaseName}`;

            console.log(`Creating discussion: ${title}`);
            console.log(`Category ID: ${process.env.DISCUSSION_CATEGORY_ID}`);

            // Create discussion using GraphQL API
            const mutation = `
              mutation($repositoryId: ID!, $categoryId: ID!, $title: String!, $body: String!) {
                createDiscussion(input: {
                  repositoryId: $repositoryId
                  categoryId: $categoryId
                  title: $title
                  body: $body
                }) {
                  discussion {
                    url
                  }
                }
              }
            `;

            // Get repository ID
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const repositoryId = repo.node_id;

            // Create the discussion
            const result = await github.graphql(mutation, {
              repositoryId: repositoryId,
              categoryId: process.env.DISCUSSION_CATEGORY_ID,
              title: title,
              body: discussionBody
            });

            const discussionUrl = result.createDiscussion.discussion.url;
            console.log(`✅ Discussion created: ${discussionUrl}`);
            core.setOutput('discussion_url', discussionUrl);

      - name: Skip discussion post
        if: steps.release-details.outputs.release_found == 'false'
        run: |
          echo "ℹ️  Skipping GitHub Discussion - release not found: $RELEASE_NAME"
