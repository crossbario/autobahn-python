name: release

on:
  # Auto-trigger after wheel builds complete
  workflow_run:
    workflows: ["wheels", "wheels-docker", "wstest"]
    types: [completed]

  # For PR summaries (runs in main repo context with write permissions)
  pull_request_target:
    types: [opened, synchronize, reopened]

  # Manual dispatch for debugging
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to post summary for"
        required: false
        type: string

jobs:
  identifiers:
    uses: ./.cicd/workflows/identifiers.yml

  # Unified GitHub Release publishing (consolidates wheels from both workflows)
  publish-github-release:
    name: Publish Unified GitHub Release
    needs: identifiers
    runs-on: ubuntu-latest

    # Only create releases for nightly builds and official releases, not development/PR builds
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success' &&
      needs.identifiers.outputs.release_type != 'development' &&
      (github.event.workflow_run.name == 'wheels' || github.event.workflow_run.name == 'wheels-docker')

    env:
      RELEASE_TYPE: ${{ needs.identifiers.outputs.release_type }}
      RELEASE_NAME: ${{ needs.identifiers.outputs.release_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download all wheel artifacts (from wheels workflow)
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist/
        continue-on-error: true

      - name: Download source distribution
        uses: actions/download-artifact@v4
        with:
          name: source-distribution
          path: dist/
        continue-on-error: true

      - name: Download Linux wheels without NVX
        uses: actions/download-artifact@v4
        with:
          name: linux-wheels-no-nvx
          path: dist/
        continue-on-error: true

      - name: Download manylinux wheel artifacts (from wheels-docker workflow)
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          merge-multiple: true
          path: wheelhouse/
        continue-on-error: true

      - name: Consolidate all artifacts
        run: |
          echo "==> Consolidating all wheel artifacts into unified release directory..."
          mkdir -p release-artifacts

          # Copy from wheels workflow
          if [ -d "dist" ]; then
            echo "Copying wheels workflow artifacts..."
            find dist -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec cp {} release-artifacts/ \;
          fi

          # Copy from wheels-docker workflow
          if [ -d "wheelhouse" ]; then
            echo "Copying wheels-docker workflow artifacts..."
            find wheelhouse -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec cp {} release-artifacts/ \;
          fi

          echo ""
          echo "==> Unified release artifact inventory:"
          ls -la release-artifacts/ || echo "No artifacts found"
          echo ""
          echo "Total wheels: $(find release-artifacts -name "*.whl" | wc -l)"
          echo "Source dists: $(find release-artifacts -name "*.tar.gz" | wc -l)"

      - name: Create unified GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "==> Creating unified GitHub release..."
          echo "Release type: $RELEASE_TYPE"
          echo "Release name: $RELEASE_NAME"

          # Delete existing release if it exists (for nightly builds)
          gh release delete "$RELEASE_NAME" --repo "$GITHUB_REPOSITORY" --yes || true

          # Construct release notes based on release type
          if [ "$RELEASE_TYPE" = "release" ]; then
            TITLE="Release $RELEASE_NAME"
            NOTES="Official release $RELEASE_NAME

## Included Platforms
- **Linux**: x86_64, ARM64 (manylinux_2_34 wheels with NVX)
- **macOS**: Apple Silicon ARM64 (binary wheels with NVX)
- **Windows**: x86_64 (binary wheels with NVX)

## Python Versions
- **CPython**: 3.11, 3.12, 3.13, 3.14
- **PyPy**: 3.11

## Installation
\`\`\`bash
pip install autobahn[all]==$RELEASE_NAME
\`\`\`

Or download wheels directly from this release."

          else  # nightly
            TITLE="Nightly Build $RELEASE_NAME"
            NOTES="Automated nightly build from master branch

## Build Information
- **Commit**: ${GITHUB_SHA::8}
- **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
- **Release Type**: nightly

## Included Platforms
- **Linux**: x86_64, ARM64 (manylinux wheels + pure Python fallbacks)
- **macOS**: Apple Silicon ARM64
- **Windows**: x86_64

## Python Versions
- **CPython**: 3.11, 3.12, 3.13, 3.14
- **PyPy**: 3.11

## Installation
Download the appropriate wheel for your platform:
\`\`\`bash
pip install <downloaded-wheel-file>
\`\`\`"
          fi

          # Create the release
          gh release create "$RELEASE_NAME" \
            --repo "$GITHUB_REPOSITORY" \
            --title "$TITLE" \
            --notes "$NOTES" \
            release-artifacts/*

          echo "✅ Release $RELEASE_NAME created successfully"

  # Post PR summary comment (existing functionality)
  post-pr-summary:
    name: Post PR Summary Comment
    needs: identifiers
    runs-on: ubuntu-latest

    # Only run for PR contexts
    if: |
      (github.event_name == 'pull_request_target') ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.event == 'pull_request' &&
       github.event.workflow_run.conclusion == 'success')

    env:
      BASE_REPO: ${{ needs.identifiers.outputs.base_repo }}
      BASE_BRANCH: ${{ needs.identifiers.outputs.base_branch }}
      PR_NUMBER: ${{ needs.identifiers.outputs.pr_number }}
      PR_REPO: ${{ needs.identifiers.outputs.pr_repo }}
      PR_BRANCH: ${{ needs.identifiers.outputs.pr_branch }}

    steps:
      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            let pr_number, head_repo, head_ref;

            if (context.eventName === 'workflow_dispatch') {
              // Manual dispatch - get PR info from input
              pr_number = context.payload.inputs.pr_number;
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });
              head_repo = pr.head.repo.full_name;
              head_ref = pr.head.ref;
            } else if (context.eventName === 'pull_request_target') {
              // pull_request_target trigger - get PR info from event
              pr_number = context.payload.pull_request.number;
              head_repo = context.payload.pull_request.head.repo.full_name;
              head_ref = context.payload.pull_request.head.ref;
            } else {
              // workflow_run trigger - get PR info from workflow_run event
              const prs = context.payload.workflow_run.pull_requests;
              if (!prs || prs.length === 0) {
                core.setFailed('No PR found in workflow_run event');
                return;
              }
              pr_number = prs[0].number;
              head_repo = prs[0].head.repo.full_name;
              head_ref = prs[0].head.ref;
            }

            console.log(`PR: #${pr_number}, Repo: ${head_repo}, Branch: ${head_ref}`);

            // Set outputs for next steps
            core.setOutput('pr_number', pr_number);
            core.setOutput('head_repo', head_repo);
            core.setOutput('head_ref', head_ref);

            // Construct summary filename
            const summary_filename = `${head_repo}-${head_ref}-${pr_number}-wstest-summary.md`;
            core.setOutput('summary_filename', summary_filename);

      - name: Download summary artifact
        uses: actions/download-artifact@v4
        with:
          name: conformance-summary-${{ github.event.workflow_run.conclusion == 'success' && 'quick' || env.TEST_MODE || 'quick' }}
          path: summary-artifact/
        continue-on-error: true

      - name: Check if summary file exists
        id: file-check
        run: |
          echo "==> Looking for summary file in artifact..."

          # Find the summary file in the downloaded artifact
          SUMMARY_FILE=$(find summary-artifact/ -name "*wstest-summary.md" | head -1)

          if [[ -z "$SUMMARY_FILE" || ! -f "$SUMMARY_FILE" ]]; then
            echo "❌ Summary file not found in artifact"
            echo "should_comment=false" >> $GITHUB_OUTPUT
            ls -la summary-artifact/ || echo "No artifact directory"
            exit 0
          fi

          echo "✅ Summary file found: $SUMMARY_FILE"
          echo "summary_file_path=$SUMMARY_FILE" >> $GITHUB_OUTPUT
          echo "should_comment=true" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: steps.file-check.outputs.should_comment == 'true'
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr_number: ${{ steps.pr-info.outputs.pr_number }}
          filePath: ${{ steps.file-check.outputs.summary_file_path }}
          comment_tag: wstest-conformance-summary
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip comment
        if: steps.file-check.outputs.should_comment == 'false'
        run: |
          echo "ℹ️  Skipping PR comment - summary file not found"
